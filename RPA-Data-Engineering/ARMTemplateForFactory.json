{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RPA-Data-Engineering"
		},
		"AzurePostgreSql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzurePostgreSql'",
			"defaultValue": "Host=;Port=;Database=;UID=;EncryptionMethod=0"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamic_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookup_master_table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select source_table, target_table, timestamp_column_name, primary_key_column, load_type, md5_columns from arshad.master_table where status=true;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LOOKUP_PGSQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "scd1_loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "filter_scd_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('filter_scd_1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "scd1_start_time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_start_time",
										"value": {
											"value": "@formatDateTime(addMinutes(addHours(utcnow(), 5), 30), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_end_time",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd_1",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_end_time",
										"value": {
											"value": "@formatDateTime(addMinutes(addHours(utcnow(), 5), 30), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_insreted_row_count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "after_row_counts_target_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_inserted_row_count",
										"value": {
											"value": "@sub(variables('scd1_after_row_counts_target_table'), variables('scd1_before_row_counts_target_table'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_error_details",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd_1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_error_details",
										"value": {
											"value": "@replace(\t\t\t\t\t\t\n   replace(\t\t\t\t\t\t\n      replace(\t\t\t\t\t\t\n         replace(\t\t\t\t\t\t\n            replace(activity('scd_1').Error.Message, '''', ''''''),\t\t\t\t\t\t\n            '\"', '\\\"'\t\t\t\t\t\t\n         ),\t\t\t\t\t\t\n         '(', ''\t\t\t\t\t\t\n      ),\t\t\t\t\t\t\n      ')', ''\t\t\t\t\t\t\n   ),\t\t\t\t\t\t\n   ',', ''\t\t\t\t\t\t\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_audit_table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "scd1_no_change_row_count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "arshad.dummy_audit_table"
										},
										{
											"name": "Destination",
											"value": "arshad.audit_table"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select\n'@{pipeline().RunId}' as run_id,\n'@{variables('scd1_start_time')}' as start_time,\n'@{variables('scd1_end_time')}' as end_time,\n'@{variables('scd1_source_file_name')}' as source_file_name,\n'@{variables('scd1_target_table_name')}' as target_table_name,\n'@{variables('scd1_code_name')}' as code_name,\n'@{pipeline().parameters.schema_name}' as schema_name,\n'@{pipeline().parameters.source_system}' as source_system,\n'@{pipeline().parameters.status}' as status,\n'@{variables('scd1_inserted_row_count')}' as inserted_row_count,\n'@{variables('scd1_updated_row_count')}' as updated_row_count,\n'@{variables('scd1_no_change_row_count')}' as no_change_row_count,\n'@{variables('scd1_start_time')}' as last_pulled_time;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "start_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "start_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "end_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "end_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "inserted_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "inserted_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "updated_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "updated_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "no_change_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "no_change_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "status",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "status",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "last_pulled_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "last_pulled_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dummy_audit_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "audit_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "scd1_error_table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "scd1_error_details",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd1_end_time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "arshad.dummy_error_table"
										},
										{
											"name": "Destination",
											"value": "arshad.error_table"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select \n'@{variables('scd1_code_name')}' as code_name,\n'@{pipeline().RunId}' as run_id,\n'@{pipeline().parameters.source_system}' as source_system,\n'@{pipeline().parameters.schema_name}' as schema_name,\n'@{variables('scd1_target_table_name')}' as target_table_name,\n'@{variables('scd1_source_file_name')}' as source_file_name,\n'@{variables('scd1_end_time')}' as execution_time,\n'@{variables('scd1_error_details')}' as error_details;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "execution_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "execution_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "error_details",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "error_details",
														"type": "String",
														"physicalType": "text"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dummy_error_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "error_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "scd1_source_table_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_source_file_name",
										"value": {
											"value": "@item().source_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_target_table_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_target_table_name",
										"value": {
											"value": "@item().target_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_primary_key_column",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_primary_key_column",
										"value": {
											"value": "@item().primary_key_column",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd_1",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "scd1_start_time",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd1_source_table_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd1_target_table_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd1_primary_key_column",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd1_timestamp_column_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd1_code_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "before_row_counts_target_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_scd_1",
											"type": "DataFlowReference",
											"parameters": {
												"scd1_primary_key_column": {
													"value": "'@{variables('scd1_primary_key_column')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceTables": {
													"SrcTableName": {
														"value": "@item().source_table",
														"type": "Expression"
													}
												},
												"TargetTable": {
													"TgtTableName": {
														"value": "@item().target_table",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine",
										"runConcurrently": true
									}
								},
								{
									"name": "scd1_timestamp_column_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_timestamp_column_name",
										"value": {
											"value": "@item().timestamp_column_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_code_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_code_name",
										"value": {
											"value": "@item().load_type",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_updated_row_count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd1_insreted_row_count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_updated_row_count",
										"value": {
											"value": "@sub(variables('scd1_delta_records'), variables('scd1_inserted_row_count'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "lookup_delta_records",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT COUNT(*) AS count\nFROM @{variables('scd1_source_file_name')}\nWHERE @{variables('scd1_timestamp_column_name')} > (\n    SELECT COALESCE(MAX(@{variables('scd1_timestamp_column_name')}), '2020-01-01 00:00:00'::timestamp)\n    FROM @{variables('scd1_target_table_name')}\n);",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": {
													"value": "@item().target_table",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "before_row_counts_target_table",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "lookup_before_row_count_target_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_before_row_counts_target_table",
										"value": {
											"value": "@activity('lookup_before_row_count_target_table').output.firstRow.before_total_rows\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "lookup_before_row_count_target_table",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "count_delta_records",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT COUNT(*) AS before_total_rows FROM @{item().target_table}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": "@item().target_table"
											}
										}
									}
								},
								{
									"name": "lookup_after_row_counts",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "scd_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT COUNT(*) AS after_total_rows\nFROM @{item().target_table};\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": "@item().target_table"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "after_row_counts_target_table",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "lookup_after_row_counts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_after_row_counts_target_table",
										"value": {
											"value": "@activity('lookup_after_row_counts').output.value[0].after_total_rows",
											"type": "Expression"
										}
									}
								},
								{
									"name": "count_delta_records",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "lookup_delta_records",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_delta_records",
										"value": {
											"value": "@activity('lookup_delta_records').output.value[0].count\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd1_no_change_row_count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd1_updated_row_count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd1_no_change_row_count",
										"value": {
											"value": "@sub(variables('scd1_after_row_counts_target_table'), variables('scd1_delta_records'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "filter_scd_1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "lookup_master_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookup_master_table').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().load_type, 'scd_1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "filter_inc_load",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "lookup_master_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookup_master_table').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().load_type, 'inc_load')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "incremental_loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "filter_inc_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('filter_inc_load').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "incremental_load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "inc_start_time",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "inc_source_table_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "inc_target_table_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "inc_timestamp_column_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "inc_code_name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT * FROM @{variables('inc_source_file_name')}\nWHERE @{variables('inc_timestamp_column_name')} > (\n    SELECT COALESCE(MAX(@{variables('inc_timestamp_column_name')}), '2020-01-01 00:00:00'::timestamp)\n    FROM @{variables('inc_target_table_name')}\n);",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SCR_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"SrcTableName": {
													"value": "@item().source_table",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": {
													"value": "@item().target_table",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "inc_start_time",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "inc_before_row_counts_target_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_start_time",
										"value": {
											"value": "@formatDateTime(addMinutes(addHours(utcnow(), 5), 30), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inc_end_time",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "incremental_load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_end_time",
										"value": {
											"value": "@formatDateTime(addMinutes(addHours(utcnow(), 5), 30), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inc_insreted_row_count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "incremental_load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_inserted_row_count",
										"value": {
											"value": "@activity('incremental_load').output.rowsCopied\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inc_error_details",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "incremental_load",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_error_details",
										"value": {
											"value": "@replace(activity('incremental_load').Error.Message, '''', '''''')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inc_audit_table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "incremental_load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "arshad.dummy_audit_table"
										},
										{
											"name": "Destination",
											"value": "arshad.audit_table"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select\n'@{pipeline().RunId}' as run_id,\n'@{variables('inc_start_time')}' as start_time,\n'@{variables('inc_end_time')}' as end_time,\n'@{variables('inc_source_file_name')}' as source_file_name,\n'@{variables('inc_target_table_name')}' as target_table_name,\n'@{variables('inc_code_name')}' as code_name,\n'@{pipeline().parameters.schema_name}' as schema_name,\n'@{pipeline().parameters.source_system}' as source_system,\n'@{pipeline().parameters.status}' as status,\n'@{variables('inc_inserted_row_count')}' as inserted_row_count,\n'@{variables('inc_before_row_counts')}' as no_change_row_count,\n'@{variables('inc_start_time')}' as last_pulled_time;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "start_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "start_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "end_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "end_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "inserted_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "inserted_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "no_change_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "no_change_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "status",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "status",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "last_pulled_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "last_pulled_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dummy_audit_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "audit_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "inc_error_table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "inc_error_details",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "inc_end_time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "arshad.dummy_error_table"
										},
										{
											"name": "Destination",
											"value": "arshad.error_table"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select \n'@{variables('inc_code_name')}' as code_name,\n'@{pipeline().RunId}' as run_id,\n'@{pipeline().parameters.source_system}' as source_system,\n'@{pipeline().parameters.schema_name}' as schema_name,\n'@{variables('inc_target_table_name')}' as target_table_name,\n'@{variables('inc_source_file_name')}' as source_file_name,\n'@{variables('inc_end_time')}' as execution_time,\n'@{variables('inc_error_details')}' as error_details;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "execution_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "execution_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "error_details",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "error_details",
														"type": "String",
														"physicalType": "text"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dummy_error_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "error_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "inc_source_table_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_source_file_name",
										"value": {
											"value": "@item().source_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inc_target_table_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_target_table_name",
										"value": {
											"value": "@item().target_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inc_timestamp_column_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_timestamp_column_name",
										"value": {
											"value": "@item().timestamp_column_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inc_code_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_code_name",
										"value": {
											"value": "@item().load_type",
											"type": "Expression"
										}
									}
								},
								{
									"name": "lookup_before_row_counts",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT COUNT(*) AS before_total_rows FROM @{item().target_table}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": "@item().target_table"
											}
										}
									}
								},
								{
									"name": "inc_before_row_counts_target_table",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "lookup_before_row_counts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inc_before_row_counts",
										"value": {
											"value": "@activity('lookup_before_row_counts').output.firstRow.before_total_rows\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "filter_scd_2",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "lookup_master_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookup_master_table').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().load_type, 'scd_2')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "scd2_loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "filter_scd_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('filter_scd_2').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "scd2_start_time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_start_time",
										"value": {
											"value": "@formatDateTime(addMinutes(addHours(utcnow(), 5), 30), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_end_time",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd_2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_end_time",
										"value": {
											"value": "@formatDateTime(addMinutes(addHours(utcnow(), 5), 30), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_insreted_row_count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_updated_row_count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_inserted_row_count",
										"value": {
											"value": "@sub(activity('scd_2').output.runStatus.metrics.LoadInsert.rowsWritten,variables('scd2_updated_row_count'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_error_details",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd_2",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_error_details",
										"value": {
											"value": "@replace(\t\t\t\t\t\t\n   replace(\t\t\t\t\t\t\n      replace(\t\t\t\t\t\t\n         replace(\t\t\t\t\t\t\n            replace(activity('scd_2').Error.Message, '''', ''''''),\t\t\t\t\t\t\n            '\"', '\\\"'\t\t\t\t\t\t\n         ),\t\t\t\t\t\t\n         '(', ''\t\t\t\t\t\t\n      ),\t\t\t\t\t\t\n      ')', ''\t\t\t\t\t\t\n   ),\t\t\t\t\t\t\n   ',', ''\t\t\t\t\t\t\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_audit_table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "scd2_no_change_row_count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "arshad.dummy_audit_table"
										},
										{
											"name": "Destination",
											"value": "arshad.audit_table"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select\n'@{pipeline().RunId}' as run_id,\n'@{variables('scd2_start_time')}' as start_time,\n'@{variables('scd2_end_time')}' as end_time,\n'@{variables('scd2_source_file_name')}' as source_file_name,\n'@{variables('scd2_target_table_name')}' as target_table_name,\n'@{variables('scd2_code_name')}' as code_name,\n'@{pipeline().parameters.schema_name}' as schema_name,\n'@{pipeline().parameters.source_system}' as source_system,\n'@{pipeline().parameters.status}' as status,\n'@{variables('scd2_inserted_row_count')}' as inserted_row_count,\n'@{variables('scd2_updated_row_count')}' as updated_row_count,\n'@{variables('scd2_no_change_row_count')}' as no_change_row_count,\n'@{variables('scd2_start_time')}' as last_pulled_time;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "start_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "start_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "end_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "end_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "inserted_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "inserted_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "updated_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "updated_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "no_change_row_count",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "no_change_row_count",
														"type": "Int32",
														"physicalType": "integer"
													}
												},
												{
													"source": {
														"name": "status",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "status",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "last_pulled_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "last_pulled_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dummy_audit_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "audit_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "scd2_error_table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "scd2_error_details",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_end_time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "arshad.dummy_error_table"
										},
										{
											"name": "Destination",
											"value": "arshad.error_table"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select \n'@{variables('scd2_code_name')}' as code_name,\n'@{pipeline().RunId}' as run_id,\n'@{pipeline().parameters.source_system}' as source_system,\n'@{pipeline().parameters.schema_name}' as schema_name,\n'@{variables('scd2_target_table_name')}' as target_table_name,\n'@{variables('scd2_source_file_name')}' as source_file_name,\n'@{variables('scd2_end_time')}' as execution_time,\n'@{variables('scd2_error_details')}' as error_details;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "code_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "run_id",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_system",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "schema_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "target_table_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "source_file_name",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "execution_time",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "execution_time",
														"type": "DateTime",
														"physicalType": "timestamp without time zone"
													}
												},
												{
													"source": {
														"name": "error_details",
														"type": "String",
														"physicalType": "text"
													},
													"sink": {
														"name": "error_details",
														"type": "String",
														"physicalType": "text"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dummy_error_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "error_table",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "scd2_source_table_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_source_file_name",
										"value": {
											"value": "@item().source_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_target_table_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_target_table_name",
										"value": {
											"value": "@item().target_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd_2",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "scd2_start_time",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_code_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_timestamp_column_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_target_table_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_source_table_name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_scd_2",
											"type": "DataFlowReference",
											"parameters": {
												"scd2_timestamp_column_name": {
													"value": "'@{variables('scd2_timestamp_column_name')}'",
													"type": "Expression"
												},
												"scd2_all_column_names": {
													"value": "@variables('scd2_md5_columns_array')",
													"type": "Expression"
												},
												"scd2_source_primary_key": {
													"value": "'@{variables('scd2_source_pk')}'",
													"type": "Expression"
												},
												"scd2_target_primary_key": {
													"value": "'@{variables('scd2_target_pk')}'",
													"type": "Expression"
												},
												"scd2_active_column": {
													"value": "'@{variables('scd2_status_column')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceTables": {
													"SrcTableName": {
														"value": "@item().source_table",
														"type": "Expression"
													}
												},
												"TargetTables": {
													"TgtTableName": {
														"value": "@item().target_table",
														"type": "Expression"
													}
												},
												"LoadUpsert": {
													"TgtTableName": {
														"value": "@item().target_table",
														"type": "Expression"
													}
												},
												"LoadUpdate": {
													"TgtTableName": "@item().target_table"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "scd2_timestamp_column_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_timestamp_column_name",
										"value": {
											"value": "@item().timestamp_column_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_code_name",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_target_pk",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_source_pk",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_active_column_name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_md5_columns_in_array",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_code_name",
										"value": {
											"value": "@item().load_type",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_updated_row_count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_updated_row_count",
										"value": {
											"value": "@activity('scd_2').output.runStatus.metrics.LoadUpdate.rowsWritten",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_lookup_after_row_counts",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "scd_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT COUNT(*) AS after_total_rows\nFROM @{item().target_table};\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": "@item().target_table"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "scd2_after_row_counts_target_table",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_lookup_after_row_counts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_after_row_counts_target_table",
										"value": {
											"value": "@activity('scd2_lookup_after_row_counts').output.value[0].after_total_rows",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_delta_records",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_insreted_row_count",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "scd2_after_row_counts_target_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_delta_records",
										"value": {
											"value": "@add(activity('scd_2').output.runStatus.metrics.LoadInsert.rowsWritten, variables('scd2_updated_row_count'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_md5_columns_in_array",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_md5_columns",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_md5_columns_array",
										"value": {
											"value": "@split(variables('scd2_md5_columns'), ',')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_lookup_target_primary_key",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT primary_key_column\nFROM arshad.master_table\nWHERE target_table= '@{item().target_table}';",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": {
													"value": "arshad.master_table",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "scd2_lookup_source_primary_key",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT primary_key_column\nFROM arshad.master_table\nWHERE source_table= '@{item().source_table}';",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": {
													"value": "arshad.master_table",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "scd2_lookup_active_column_name",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT active_column_name\nFROM arshad.master_table\nWHERE target_table= '@{item().target_table}';",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": {
													"value": "arshad.master_table",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "scd2_active_column_name",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_lookup_active_column_name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_status_column",
										"value": {
											"value": "@activity('scd2_lookup_active_column_name').output.value[0].active_column_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_target_pk",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_lookup_target_primary_key",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_target_pk",
										"value": {
											"value": "@activity('scd2_lookup_target_primary_key').output.value[0].primary_key_column",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_source_pk",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_lookup_source_primary_key",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_source_pk",
										"value": {
											"value": "@activity('scd2_lookup_source_primary_key').output.value[0].primary_key_column",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_lookup_md5_columns",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT md5_columns\nFROM arshad.master_table\nWHERE target_table= '@{item().target_table}';",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TGT_PGSQL",
											"type": "DatasetReference",
											"parameters": {
												"TgtTableName": "arshad.master_table"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "scd2_md5_columns",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_lookup_md5_columns",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_md5_columns",
										"value": {
											"value": "@activity('scd2_lookup_md5_columns').output.value[0].md5_columns",
											"type": "Expression"
										}
									}
								},
								{
									"name": "scd2_no_change_row_count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "scd2_delta_records",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "scd2_no_change_row_count",
										"value": {
											"value": "@sub(int(variables('scd2_after_row_counts_target_table')),\nint(variables('scd2_delta_records')))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"status": {
						"type": "string",
						"defaultValue": "Success"
					},
					"source_system": {
						"type": "string",
						"defaultValue": "AzurePostgreSQL"
					},
					"schema_name": {
						"type": "string",
						"defaultValue": "arshad"
					}
				},
				"variables": {
					"inc_start_time": {
						"type": "String"
					},
					"inc_last_pulled_time": {
						"type": "String"
					},
					"inc_end_time": {
						"type": "String"
					},
					"inc_source_file_name": {
						"type": "String"
					},
					"inc_target_table_name": {
						"type": "String"
					},
					"inc_inserted_row_count": {
						"type": "Integer"
					},
					"inc_error_details": {
						"type": "String"
					},
					"inc_timestamp_column_name": {
						"type": "String"
					},
					"scd1_primary_key_column": {
						"type": "String"
					},
					"scd1_updated_row_count": {
						"type": "Integer"
					},
					"scd1_start_time": {
						"type": "String"
					},
					"scd1_last_pulled_time": {
						"type": "String"
					},
					"scd1_end_time": {
						"type": "String"
					},
					"scd1_source_file_name": {
						"type": "String"
					},
					"scd1_target_table_name": {
						"type": "String"
					},
					"scd1_inserted_row_count": {
						"type": "Integer"
					},
					"scd1_error_details": {
						"type": "String"
					},
					"scd1_timestamp_column_name": {
						"type": "String"
					},
					"scd1_code_name": {
						"type": "String"
					},
					"inc_code_name": {
						"type": "String"
					},
					"scd1_tgt_timestamp_column": {
						"type": "String"
					},
					"scd2_start_time": {
						"type": "String"
					},
					"scd2_source_file_name": {
						"type": "String"
					},
					"scd2_target_table_name": {
						"type": "String"
					},
					"scd2_primary_key_column": {
						"type": "String"
					},
					"scd2_timestamp_column_name": {
						"type": "String"
					},
					"scd2_code_name": {
						"type": "String"
					},
					"scd2_end_time": {
						"type": "String"
					},
					"scd2_inserted_row_count": {
						"type": "Integer"
					},
					"scd2_updated_row_count": {
						"type": "Integer"
					},
					"scd2_error_details": {
						"type": "String"
					},
					"scd1_before_row_counts_target_table": {
						"type": "Integer"
					},
					"scd1_after_row_counts_target_table": {
						"type": "Integer"
					},
					"scd1_delta_records": {
						"type": "Integer"
					},
					"scd1_no_change_row_count": {
						"type": "Integer"
					},
					"scd1_previous_row_count": {
						"type": "Integer"
					},
					"scd1_deleted_row_count": {
						"type": "Integer"
					},
					"scd2_no_change_row_count": {
						"type": "Integer"
					},
					"scd2_delta_records": {
						"type": "Integer"
					},
					"scd2_before_row_counts_target_table": {
						"type": "Integer"
					},
					"scd2_after_row_counts_target_table": {
						"type": "Integer"
					},
					"scd2_md5_columns_array": {
						"type": "Array"
					},
					"scd2_status_column": {
						"type": "String"
					},
					"scd2_target_pk": {
						"type": "String"
					},
					"scd2_source_pk": {
						"type": "String"
					},
					"scd2_md5_columns": {
						"type": "String"
					},
					"inc_before_row_counts": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-21T10:16:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOOKUP_PGSQL')]",
				"[concat(variables('factoryId'), '/datasets/dummy_audit_table')]",
				"[concat(variables('factoryId'), '/datasets/audit_table')]",
				"[concat(variables('factoryId'), '/datasets/dummy_error_table')]",
				"[concat(variables('factoryId'), '/datasets/error_table')]",
				"[concat(variables('factoryId'), '/dataflows/df_scd_1')]",
				"[concat(variables('factoryId'), '/datasets/TGT_PGSQL')]",
				"[concat(variables('factoryId'), '/datasets/SCR_PGSQL')]",
				"[concat(variables('factoryId'), '/dataflows/df_scd_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOOKUP_PGSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "table_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_table",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "target_table",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "timestamp_column",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "arshad",
					"table": "master_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCR_PGSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SrcTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@split(dataset().SrcTableName, '.')[0]",
						"type": "Expression"
					},
					"table": {
						"value": "@split(dataset().SrcTableName, '.')[1]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_PGSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TgtTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@split(dataset().TgtTableName, '.')[0]",
						"type": "Expression"
					},
					"table": {
						"value": "@split(dataset().TgtTableName, '.')[1]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/audit_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "audit_key",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "config_key",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "code_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "run_id",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_system",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "schema_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "target_table_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_file_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "start_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "end_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "inserted_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "deleted_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "no_change_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_pulled_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "arshad",
					"table": "audit_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummy_audit_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "audit_key",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "config_key",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "code_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "run_id",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_system",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "schema_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "target_table_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_file_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "start_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "end_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "inserted_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "deleted_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "no_change_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_pulled_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "arshad",
					"table": "dummy_audit_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummy_error_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "audit_key",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "config_key",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "code_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "run_id",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_system",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "schema_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "target_table_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_file_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "start_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "end_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "inserted_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "deleted_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "no_change_row_count",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_pulled_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "arshad",
					"table": "dummy_error_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/error_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "config_key",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "audit_key",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "code_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "run_id",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_system",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "schema_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "target_table_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source_file_name",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "execution_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "error_details",
						"type": "text",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "arshad",
					"table": "error_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"version": "1.0",
				"typeProperties": {
					"connectionString": "[parameters('AzurePostgreSql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SCR_PGSQL",
								"type": "DatasetReference"
							},
							"name": "SourceTables"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_PGSQL",
								"type": "DatasetReference"
							},
							"name": "TargetTable",
							"description": "ETaxport data to TGT_PGSQL"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     scd1_primary_key_column as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceTables",
						"SourceTables alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:[($scd1_primary_key_column)],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TargetTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCR_PGSQL')]",
				"[concat(variables('factoryId'), '/datasets/TGT_PGSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd_2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SCR_PGSQL",
								"type": "DatasetReference"
							},
							"name": "SourceTables"
						},
						{
							"dataset": {
								"referenceName": "TGT_PGSQL",
								"type": "DatasetReference"
							},
							"name": "TargetTables"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_PGSQL",
								"type": "DatasetReference"
							},
							"name": "LoadUpsert"
						},
						{
							"dataset": {
								"referenceName": "TGT_PGSQL",
								"type": "DatasetReference"
							},
							"name": "LoadUpdate"
						}
					],
					"transformations": [
						{
							"name": "SourceHash"
						},
						{
							"name": "TargetHash"
						},
						{
							"name": "AuditColumns"
						},
						{
							"name": "ForInsertRow"
						},
						{
							"name": "ExistsTarget"
						},
						{
							"name": "UpdateIf"
						},
						{
							"name": "UpdateAuditColumns"
						},
						{
							"name": "FilterActiveOnly"
						},
						{
							"name": "ExisitsForUpdate"
						},
						{
							"name": "UpsertIf"
						}
					],
					"scriptLines": [
						"parameters{",
						"     scd2_timestamp_column_name as string,",
						"     scd2_all_column_names as string[],",
						"     scd2_source_primary_key as string,",
						"     scd2_target_primary_key as string,",
						"     scd2_active_column as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceTables",
						"source(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TargetTables",
						"SourceTables derive(Hash = md5(concat(\r",
						"    coalesce(toString(byName($scd2_all_column_names[0])), ''), '|',\r",
						"    coalesce(toString(byName($scd2_all_column_names[1])), ''), '|',\r",
						"    coalesce(toString(byName($scd2_all_column_names[2])), ''), '|',\r",
						"    coalesce(toString(byName($scd2_all_column_names[3])), ''), '|',\r",
						"    coalesce(toString(byName($scd2_all_column_names[4])), '')\r",
						"))) ~> SourceHash",
						"FilterActiveOnly derive(Hash = md5(concat(    \r",
						"    coalesce(toString(byName($scd2_all_column_names[0])), ''), '|',    \r",
						"    coalesce(toString(byName($scd2_all_column_names[1])), ''), '|',    \r",
						"    coalesce(toString(byName($scd2_all_column_names[2])), ''), '|',    \r",
						"    coalesce(toString(byName($scd2_all_column_names[3])), ''), '|',    \r",
						"    coalesce(toString(byName($scd2_all_column_names[4])), '')\r",
						"    )\r",
						")) ~> TargetHash",
						"ForInsertRow derive(start_date = currentTimestamp(),",
						"          end_date = toTimestamp('2099-12-31','yyyy-MM-dd'),",
						"          status = 'Y') ~> AuditColumns",
						"SourceHash, TargetHash exists(SourceHash@Hash == TargetHash@Hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> ForInsertRow",
						"TargetHash, SourceHash exists($scd2_source_primary_key==$scd2_target_primary_key,",
						"     negate:false,",
						"     broadcast: 'auto')~> ExistsTarget",
						"UpdateAuditColumns alterRow(updateIf(true())) ~> UpdateIf",
						"ExisitsForUpdate derive(end_date = currentTimestamp(),",
						"          status = 'N') ~> UpdateAuditColumns",
						"TargetTables filter(toString(byName(($scd2_active_column)))=='Y') ~> FilterActiveOnly",
						"ExistsTarget, SourceHash exists(TargetHash@Hash==SourceHash@Hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> ExisitsForUpdate",
						"AuditColumns alterRow(upsertIf(true())) ~> UpsertIf",
						"UpsertIf sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LoadUpsert",
						"UpdateIf sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LoadUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCR_PGSQL')]",
				"[concat(variables('factoryId'), '/datasets/TGT_PGSQL')]"
			]
		}
	]
}